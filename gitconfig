#!/usr/bin/env bash

readonly GIT_FLAGS=$@

git-cfg() {
   git config $GIT_FLAGS --replace-all "$@"
}

#######################################
# branch
######################################

# setup pull --rebase as default for every new branch
# or manually for every branch you have with 'git config branch.BRANCH_NAME.rebase true' (replace BRANCH_NAME as required)
# Note that you can disable automatic rebasing when needed by 'git pull --no-rebase'
git-cfg branch.autosetuprebase always

# master branch (a special one!) needs to be set in this way
git-cfg branch.master.rebase true

#######################################
# core
#######################################

git-cfg core.editor vim

# track changes of the executable bit of mode (not the read/write bits)
git-cfg core.filemode true

# to speed up NFS git status command
# http://stackoverflow.com/questions/2872587/git-can-i-speed-up-committing
git-cfg core.preloadindex true

# required for the 'pl' alias to colorize the output
git-cfg core.pager 'less -r'

git-cfg core.autocrlf input

git-cfg core.bare false

#######################################
# fetch
#######################################

git-cfg fetch.prune true

#######################################
# merge
#######################################

# reminder to rebase, forcing otherwise with --no-ff
git-cfg merge.ff only

#######################################
# push
#######################################

git-cfg push.default upstream

#######################################
# alias
#######################################

git-cfg alias.amend 'commit --all --amend --no-edit'

git-cfg alias.br branch

# cherry picking from another repository: $1="repository path" $2="commit HASH"
git-cfg alias.cherry-pick-repo '!f() { \
   git --git-dir="$1/.git" format-patch -k -1 --stdout "$2" | git am -3 -k; \
}; f'

git-cfg alias.ci 'commit -s'

git-cfg alias.co checkout

# Example: git fshow HEAD~5.. # show list of changed files over the last four commits
git-cfg alias.fshow '!f() { \
   git show --pretty=format: --name-only "$1" \
   | grep -v '^$' \
   | uniq \
   | sed "s@^@$(git rev-parse --show-toplevel)/@"; \
]; f'

git-cfg alias.lf 'log --follow'

# pretty log
git-cfg alias.pl "log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"

git-cfg alias.review '!f() { \
   if [ -v REVIEWERS ]; then \
      `# Gerrit reviewers format` \
      reviewers=$(echo "$REVIEWERS" | sed -e "s|^|%r=|" -e "s|,|,r=|g"); \
   else \
      echo "Add reviewers by setting their username to environment variable REVIEWERS." \
           "For example: export REVIEWERS=username1,username2,username3"; \
      reviewers=''; \
   fi; \
   if [ $# -gt 0 ]; then \
      branch=$1; \
   else \
      `# upstream branch` \
      branch=$(git rev-parse --abbrev-ref --symbolic-full-name @{u} | cut -f2 -d/); \
   fi; \
   git push origin "${2:-HEAD}:refs/for/$branch$reviewers"; \
}; f'

git-cfg alias.st status

# Example: git vim HEAD~5.. # edit files changed over the last four commits
git-cfg alias.vim '!f() { vim "$(git fshow "$1")"; }; f'

# worktree related
{
   git-cfg alias.common-dirname '!f() { basename "$(readlink -f "$(git rev-parse --git-common-dir)/..")"; }; f'

   git-cfg alias.worktree-path '!f() { \
      readlink -f "$(git rev-parse --git-common-dir)/../../$(git common-dirname)_$1"; \
   }; f'

   git-cfg alias.wt 'worktree list'

   git-cfg alias.wta '!f() { \
      if [ "$1 $2" != " "  ]; then \
         git worktree add -b "_$1" "$(git worktree-path "$1")" "$2"; \
      else \
         echo "usage: git wta WORKTREE_ID BRANCH" >&2; \
      fi; \
   }; f'

   git-cfg alias.wtz '!f() { \
      if [ -n "$1" ]; then \
         rm -rf "$(git worktree-path "$1")"; \
         git worktree prune; \
         git branch --delete --force "_$1"; \
      else \
         echo "usage: git wtz WORKTREE_ID" >&2; \
      fi \
   }; f'
}
