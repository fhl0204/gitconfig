#!/usr/bin/env bash

readonly GIT_FLAGS=$@

git-cfg() {
   git config $GIT_FLAGS --replace-all "$@"
}

#######################################
# branch
######################################

# setup pull --rebase as default for every new branch
# or manually for every branch you have with 'git config branch.BRANCH_NAME.rebase true' (replace BRANCH_NAME as required)
# Note that you can disable automatic rebasing when needed by 'git pull --no-rebase'
git-cfg branch.autosetuprebase always

# master branch (a special one!) needs to be set in this way
git-cfg branch.master.rebase true

#######################################
# core
#######################################

git-cfg core.editor vim

# track changes of the executable bit of mode (not the read/write bits)
git-cfg core.filemode true

# to speed up NFS git status command
# http://stackoverflow.com/questions/2872587/git-can-i-speed-up-committing
git-cfg core.preloadindex true

# required for the 'pl' alias to colorize the output
git-cfg core.pager 'less --RAW-CONTROL-CHARS --no-init --quit-if-one-screen'

git-cfg core.autocrlf input

git-cfg core.bare false

#######################################
# fetch
#######################################

git-cfg fetch.prune true

#######################################
# log
#######################################

git-cfg log.follow true

#######################################
# push
#######################################

git-cfg push.default upstream

#######################################
# alias
#######################################

git-cfg alias.amend 'commit --all --amend --no-edit'

git-cfg alias.br branch

# cherry picking from another repository
git-cfg alias.cherry-pick-repo '!bash -c '"'"'f() { \
   [[ $# -eq 2 ]] || { echo "usage: git cherry-pick-repo REPOSITORY_PATH COMMIT" >&2; return 1; }; \
   git --git-dir="$1/.git" format-patch --keep-subject -1 --stdout "$2" | git am -3 --keep-non-patch; \
}; f "$@"'"' --"

# Example: git cherry-files # show list of changed files over the local commits
git-cfg alias.cherry-files '!git files --branches --not --remotes'

git-cfg alias.ci 'commit -s'

git-cfg alias.co checkout

git-cfg alias.cor '!bash -c '"'"'f() { git checkout "$@" && git submodule update; }; f "$@"'"' --"

# Example: git files HEAD~5.. # show list of changed files over the last four commits
git-cfg alias.files '!bash -c '"'"'f() { \
   git show --diff-filter=AM --pretty=format: --name-only "$@" \
   | grep -v "^$" \
   | uniq \
   | sed "s@^@$(git rev-parse --show-toplevel)/@"; \
}; f "$@"'"' --"

git-cfg alias.lf 'log --follow'

# pretty log
git-cfg alias.pl "log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"

git-cfg alias.review '!bash -c '"'"'f() { \
   [[ $# -le 2 ]] || { echo "usage: git review [BRANCH] [SOURCE_OBJECT]" >&2; return 1; }; \
   if [[ -n ${REVIEWERS:-} ]]; then \
      `# Gerrit reviewers format`; \
      reviewers=$(echo "$REVIEWERS" | sed --expression="s|^|%r=|" --expression="s|,|,r=|g"); \
   else \
      echo "warning: add reviewers by setting their username to environment variable REVIEWERS." \
           "For example: export REVIEWERS=username1,username2,username3" >&2; \
      reviewers=""; \
   fi; \
   if [[ $# -eq 2 ]]; then \
      branch=$2; \
   else \
      `# upstream branch`; \
      branch=$(git rev-parse --abbrev-ref --symbolic-full-name @{u} | cut --fields=2- --delimiter=/); \
   fi; \
   git push origin "${1:-HEAD}:refs/for/$branch$reviewers"; \
}; f "$@"'"' --"

git-cfg alias.st status

# Example: git vim HEAD~5.. # edit files changed over the last four commits
git-cfg alias.vim '!bash -c '"'"'f() { vim "$(git files "$1")"; }; f "$@"'"' --"

# worktree related
{
   git-cfg alias.common-dirname '!bash -c '"'"'f() { basename "$(readlink -f "$(git rev-parse --git-common-dir)/..")"; }; f'"'"

   git-cfg alias.worktree-path '!bash -c '"'"'f() { \
      readlink -f "$(git rev-parse --git-common-dir)/../../$(git common-dirname)_$1"; \
   }; f "$@"'"' --"

   git-cfg alias.wl 'worktree list'

   # worktree add
   git-cfg alias.wa '!bash -c '"'"'f() { \
      if [[ $# -eq 2 ]]; then \
         git worktree add -b "_$1" "$(git worktree-path "$1")" "$2"; \
      else \
         echo "usage: git wa WORKTREE_ID BRANCH" >&2; return 1; \
      fi; \
   }; f "$@"'"' --"

   # worktree delete
   git-cfg alias.wd '!bash -c '"'"'f() { \
      if [[ $# -eq 1 ]]; then \
         worktree_path=$(git worktree-path "$1"); \
         rm --force --recursive "$worktree_path"; \
         echo "Removed directory $worktree_path"; \
         git worktree prune --verbose; \
         git branch --delete --force "_$1"; \
      else \
         echo "usage: git wd WORKTREE_ID" >&2; return 1; \
      fi \
   }; f "$@"'"' --"
}
